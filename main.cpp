#include <iostream>


#include "game.hpp"


using namespace game;


std::vector<element> init_data() {
    std::vector<element> ret;

    element e1[] = {
        {{0, 0}, 3}, {{2, 0}, 2}, {{3, 0}, 7}, {{8, 0}, 9},
        {{2, 1}, 8}, {{7, 1}, 4}, {{8, 1}, 5},
        {{2, 2}, 4}, {{5, 2}, 1}, {{6, 2}, 3},
        {{4, 3}, 5}, {{5, 3}, 9},
        {{1, 4}, 9}, {{4, 4}, 3}, {{7, 4}, 6},
        {{3, 5}, 2}, {{4, 5}, 6},
        {{2, 6}, 1}, {{3, 6}, 4}, {{6, 6}, 2},
        {{0, 7}, 2}, {{1, 7}, 6}, {{6, 7}, 1},
        {{0, 8}, 4}, {{5, 8}, 2}, {{6, 8}, 5}, {{8, 8}, 3}
    };
    for (int i = 0; i < sizeof(e1) / sizeof(element); i++) {
        ret.push_back(e1[i]);
    }
    return ret;
}

std::vector<element> init_data1() {
    std::vector<element> ret;
    element e1[] = {
        {{0, 0}, 0}, {{1, 0}, 9}, {{2, 0}, 5},     {{3, 0}, 0}, {{4, 0}, 0}, {{5, 0}, 8},       {{6, 0}, 0}, {{7, 0}, 0}, {{8, 0}, 0},
        {{0, 1}, 0}, {{1, 1}, 0}, {{2, 1}, 2},     {{3, 1}, 0}, {{4, 1}, 0}, {{5, 1}, 6},       {{6, 1}, 7}, {{7, 1}, 0}, {{8, 1}, 0},
        {{0, 2}, 0}, {{1, 2}, 4}, {{2, 2}, 0},     {{3, 2}, 0}, {{4, 2}, 0}, {{5, 2}, 0},       {{6, 2}, 0}, {{7, 2}, 0}, {{8, 2}, 5},
        
        {{0, 3}, 0}, {{1, 3}, 5}, {{2, 3}, 0},     {{3, 3}, 0}, {{4, 3}, 2}, {{5, 3}, 0},       {{6, 3}, 0}, {{7, 3}, 0}, {{8, 3}, 7},
        {{0, 4}, 0}, {{1, 4}, 6}, {{2, 4}, 0},     {{3, 4}, 0}, {{4, 4}, 5}, {{5, 4}, 0},       {{6, 4}, 0}, {{7, 4}, 2}, {{8, 4}, 0},
        {{0, 5}, 4}, {{1, 5}, 0}, {{2, 5}, 0},     {{3, 5}, 0}, {{4, 5}, 7}, {{5, 5}, 0},       {{6, 5}, 0}, {{7, 5}, 8}, {{8, 5}, 0},
        
        {{0, 6}, 2}, {{1, 6}, 0}, {{2, 6}, 0},     {{3, 6}, 0}, {{4, 6}, 0}, {{5, 6}, 0},       {{6, 6}, 0}, {{7, 6}, 4}, {{8, 6}, 0},
        {{0, 7}, 0}, {{1, 7}, 0}, {{2, 7}, 6},     {{3, 7}, 1}, {{4, 7}, 0}, {{5, 7}, 0},       {{6, 7}, 3}, {{7, 7}, 0}, {{8, 7}, 0},
        {{0, 8}, 0}, {{1, 8}, 0}, {{2, 8}, 0},     {{3, 8}, 3}, {{4, 8}, 0}, {{5, 8}, 0},       {{6, 8}, 2}, {{7, 8}, 5}, {{8, 8}, 0},
    };
    for (int i = 0; i < sizeof(e1) / sizeof(element); i++) {
        ret.push_back(e1[i]);
    }
    return ret;
}


int main() {
    // std::cout << "Hello, World!" << std::endl;


    frame ff(9);
    ff.init(init_data1());
    ff.print_map(0);
    ff.start();
    std::cout << "--------------------------------" << std::endl;
    ff.print_map(0);



    // for (int i = 0; i < 9; i++) {
    //     for (auto &p : ff.get_ver_consider(i)) {
    //         std::cout << p  << "   ";
    //     }
    //     std::cout << std::endl;
    // }

    return 0;
}